# -*- coding: utf-8 -*-
"""bymergeTrained.ipynb

Automatically generated by Colaboratory.

"""

from google.colab import drive
drive.mount('/content/gdrive/')

# Commented out IPython magic to ensure Python compatibility.
!pip install emnist
import emnist
import tensorflow as tf
from tensorflow import keras
from keras.utils import np_utils
import matplotlib.pyplot as plt
import os
# %matplotlib inline

#Load Dataset
train_data,train_labels=emnist.extract_training_samples('bymerge')
test_data,test_labels=emnist.extract_test_samples('bymerge')
test=test_labels
plt.imshow(test_data[0])

#Reshaping Training Data to make 28X28 grid image
train_data=train_data.reshape(train_data.shape[0],28,28,1).astype('float32')
test_data=test_data.reshape(test_data.shape[0],28,28,1).astype('float32')

#Normalizing data
train_data=train_data/255
test_data=test_data/255

#One Hot Encoding
train_labels=np_utils.to_categorical(train_labels)
test_labels=np_utils.to_categorical(test_labels)

num_classes=train_labels.shape[1]

#Our Model
model = keras.models.Sequential()

#Adding Layer in following manner: 1st Convolutional, 2nd Pooling
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense

model.add(Conv2D(32,(5,5),strides=(2,2),input_shape=(28,28,1), activation='relu',padding='same'))
model.add(MaxPooling2D())
model.add(Conv2D(128,(3,3),strides=(1,1), activation='relu',padding='same'))
model.add(MaxPooling2D())

model.add(Flatten())
model.add(Dropout(0.3))

#model.add(Dense(units=1024,activation='relu'))
#model.add(Dropout(0.5))

#model.add(Dense(units=512,activation='relu'))
#model.add(Dropout(0.5))
model.add(Dense(units=512,activation='relu'))
model.add(Dropout(0.3))

model.add(Dense(units=num_classes,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

model.fit(train_data,train_labels,epochs=30,batch_size=500,shuffle=True)

score = model.evaluate(test_data, test_labels, verbose=0,batch_size=200)

print("Accuracy on Test Data=",score[1])

#RENAME FILE NAME PLEASE!!
!mkdir -p /content/gdrive/'My Drive'/saved_model
model.save("/content/gdrive/My Drive/saved_model/merge4.h5")

!ls /content/gdrive/'My Drive'/saved_model

